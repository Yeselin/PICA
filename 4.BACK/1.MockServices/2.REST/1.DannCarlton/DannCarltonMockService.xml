<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="d5d8c5bf-5235-40b7-bdf8-9ebb92d0e1eb" activeEnvironment="Default" name="Project 1" soapui-version="5.4.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="62670bc9-7908-4378-975b-15ef08d5b82c" wadlVersion="http://wadl.dev.java.net/2009/02" name="Dann Carlton Booking Documentation" type="rest" basePath="/BookingService/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Booking documentaion contract api.
</con:description><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://dannCarlton.com</con:endpoint><con:endpoint>https://dannCarlton.com</con:endpoint></con:endpoints><con:resource name="/cancelBooking" path="/cancelBooking" id="5c9db43e-ef1a-43d6-a3dc-1c1b29b1ac62"><con:settings/><con:parameters/><con:method name="cancelBooking" id="b82951b0-47ed-4a39-a27d-8608c70e1854" method="POST"><con:description>Find by booking id Reservation
Finds Book by  id Reservation</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:request name="Request 1" id="2a86bd97-9323-4b3a-a508-30786b1244da" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://dannCarlton.com</con:endpoint><con:request>  {
    "bookingCode": 1920,
    "bookingDate": "2018-10-12",
    "numberOfRooms": 1,
    "numberOfPeople": 2,
    "requireBreakfast": true
  }</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/createBooking" path="/createBooking" id="54eacbae-e527-4278-a8e3-acd7feca19c4"><con:settings/><con:parameters/><con:method name="bookRoom" id="a67c8c04-21c5-4bbb-a15c-d2fd14a83729" method="POST"><con:description>
book a new entry at the hotel</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="494e2e2c-fc5e-41cf-8bd3-c811566421a0" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://dannCarlton.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/getBooking" path="/getBooking" id="240066b8-0780-4cfe-ab02-bfd9ecb5dc97"><con:settings/><con:parameters/><con:method name="findBoodByIdReservation" id="b184e23a-474b-4988-80f5-7f019c17ab82" method="GET"><con:description>Find by booking id Reservation
Finds Book by  id Reservation</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>idReservation</con:name><con:style>QUERY</con:style><con:description>Id Reservation is need to be considered for filter</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:request name="Request 1" id="acf9d3ff-5f46-402a-a307-b44a762ec734" mediaType="application/json"><con:settings/><con:endpoint>http://dannCarlton.com</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="f1f6b120-a73b-48ab-9563-c625911d65af" port="8080" path="/" host="Felipe-PC" name="DannCarlontMockService" docroot=""><con:description>Mock Service REST DannCarlton</con:description><con:settings/><con:properties/><con:restMockAction name="/createBooking" method="POST" resourcePath="/BookingService/v1.0/createBooking" id="5086edcd-99b9-4811-ba3c-c5bfc2db80fa"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="52ec5756-1d0f-4866-9243-6f290007df57" httpResponseStatus="200"><con:settings/><con:responseContent>{
	statusCode:0
	statusDescription:"Reserva Creada Exitosamente"
	bookingCode:12313
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/cancelBooking" method="POST" resourcePath="/BookingService/v1.0/cancelBooking" id="52b15f5a-8478-4bcd-9b5f-90fecefb8b4a"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="ca79d7bf-34d9-4361-87e3-14f786d281d5" httpResponseStatus="200"><con:settings/><con:responseContent>{
	statusCode:300
	statusDescription:"Reserva Cancelada Exitosamente"
	bookingCode:0
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/getBooking" method="GET" resourcePath="/BookingService/v1.0/getBooking" id="754ae5e6-c65f-4835-b49d-f73d3bbe05ad"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="271a9cb4-02ec-4e98-af50-2713ad5ec90b" httpResponseStatus="200"><con:settings/><con:responseContent>{
	statusCode:0
	statusDescription:"Consulta Exitosa"
	bookingCode:12313
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>