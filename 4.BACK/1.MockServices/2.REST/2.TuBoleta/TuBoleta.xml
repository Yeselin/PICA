<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="2b0578c4-9b84-47de-9290-0734016ffa5d" activeEnvironment="Default" name="MocksPica" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="c15d597c-b2dd-447d-9ece-13d4921961c4" port="8080" path="/" host="kuiper" name="TuBoleta"><con:settings/><con:properties/><con:restMockAction name="reserve" method="POST" resourcePath="/tuboleta/reserve" id="c5fb5e66-7a87-4f01-8062-4b927a925af7"><con:settings/><con:defaultResponse>SUCCESS</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="SUCCESS" id="632227ea-b42f-4821-8ecf-c2138fd25b9e" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>import groovy.json.JsonSlurper

def jsonReq = new JsonSlurper().parseText(mockRequest.requestContent)

context.setProperty("timestamp", java.time.LocalDateTime.now())
context.setProperty("transactionID", java.util.UUID.randomUUID().toString())
context.setProperty("clientID", jsonReq.clientID)
context.setProperty("price", (int)(Math.random()*2000000))
context.setProperty("category", jsonReq.category)
context.setProperty("totalTickets", jsonReq.totalTickets)</con:script><con:responseContent>{
	"timestamp": "${timestamp}",
	"transactionID": "${transactionID}",
	"clientID": "${clientID}",
	"status": "RESERVED",	
	"price": ${price},
	"event": "Shakira el dorado",
	"eventDate": "2018-11-03T19:30:00",
	"category": "${category}",
	"totalTickets": ${totalTickets},	
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="cancel" method="PUT" resourcePath="/tuboleta/reserve" id="17de0913-23c9-4299-86e2-ae6efdd1267c"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="SUCCESS" id="0a331da6-a108-4ae1-8abd-458175d0244b" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>import groovy.json.JsonSlurper


def s = new java.util.Scanner(mockRequest.request.inputStream).useDelimiter("\\A");
def jsonReq = new JsonSlurper().parseText(s.hasNext() ? s.next() : "")

context.setProperty("timestamp", java.time.LocalDateTime.now())
context.setProperty("transactionID", jsonReq.transactionID)
</con:script><con:responseContent>{
	"timestamp": "${timestamp}",
	"transactionID": '${transactionID}',
	"status": "CANCELLED"
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>